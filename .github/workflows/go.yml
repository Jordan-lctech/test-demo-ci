name: Go
on:
  push:
    branches: [ main,master ]
jobs:
  unit-test:
    name: unit-test 單元測試
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test
      run: go test -v ./...
  docker-build:
    needs: unit-test
    name: docker-build 打包鏡像
    runs-on: ubuntu-20.04
    steps:
    - name: docker-build 打包鏡像
      run: echo "hi" > hi && pwd && ls
    outputs:
      output1: ${{ steps.outputs.hi }}
  docker-test:
    needs: docker-build
    name: docker-test 鏡像測試
    runs-on: ubuntu-20.04
    steps:
    - name: docker-test 鏡像測試
      run: pwd && ls && echo ${{needs.job1.outputs.output1}}
  upload-image:
    needs: [docker-build]
    name: upload-image 鏡像上傳
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
  release:
    needs: upload-image
    name: Release to GCP 發佈程式
    runs-on: ubuntu-20.04
    steps:
    - name: Setup gcloud
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: project_id
        export_default_credentials: true
    - name: gcloud-auth
      run: |-
          ehco "do"
#         gcloud --quiet auth configure-docker
    - name: gcloud-set
      run: |-
          ehco "do"
#         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    - name: Build Publish
      run: |-
          ehco "do"
#         VERSION="g."$GITHUB_RUN_ID
#         echo "$VERSION"
#         IMAGE_REPO="asia.gcr.io/cheep2workshop"
#         docker build -t ${IMAGE_REPO}/nd-director:${VERSION} ./nd-director
#         docker build -t ${IMAGE_REPO}/nd-frontend:${VERSION} ./nd-frontend
#         docker build -t ${IMAGE_REPO}/nd-matchfunction:${VERSION} ./nd-matchfunction
#         docker push ${IMAGE_REPO}/nd-director:${VERSION}
#         docker push ${IMAGE_REPO}/nd-frontend:${VERSION} 
#         docker push ${IMAGE_REPO}/nd-matchfunction:${VERSION} 
        # MAC sed -i '' "s/_VERSION/$VERSION/" ./nd-om.yaml
#         sed -i "s/_VERSION/$VERSION/" ./nd-om.yaml
    - name: GKE-deploy
      run: |-
          ehco "do"
#         kubectl apply -f ./nd-om.yaml
  notify:
    needs: release
    name: notify 通知
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
  intergration-tests:
    needs: release
    name: Intergration Test 整合測試
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15 
  e2e-tests:
    needs: release
    name: e2e Test 點對點測試
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
  notify-fail:
    name: Ci fail 失敗通知
    needs: notify
    runs-on: ubuntu-20.04
    if: always() # set always
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: 8398a7/action-slack@v3
        with:
          status: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.WORKFLOW_CONCLUSION == 'failure'
